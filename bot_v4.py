from typing import Dict, Optional
import os
import logging
import telebot
import requests
import json
from openai import OpenAI
from dotenv import load_dotenv
from functools import lru_cache
from anthropic import Anthropic

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')

if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, DEEPSEEK_API_KEY, ANTHROPIC_API_KEY]):
    missing_keys = []
    if not TELEGRAM_TOKEN: missing_keys.append("TELEGRAM_TOKEN")
    if not OPENAI_API_KEY: missing_keys.append("OPENAI_API_KEY")
    if not DEEPSEEK_API_KEY: missing_keys.append("DEEPSEEK_API_KEY")
    if not ANTHROPIC_API_KEY: missing_keys.append("ANTHROPIC_API_KEY")
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_keys)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
anthropic_client = Anthropic(api_key=ANTHROPIC_API_KEY)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_MODEL = 'deepseek-reasoner'
DEFAULT_PROVIDER = 'DeepSeek'  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
AVAILABLE_CHATGPT_MODELS = ['gpt-4o-mini', 'gpt-3.5-turbo', 'gpt-4o']
AVAILABLE_CLAUDE_MODELS = ['claude-3-5-sonnet-20240620', 'claude-3-7-sonnet-20250219', 'claude-3-haiku-20240307']
AVAILABLE_DEEPSEEK_MODELS = ['deepseek-chat', 'deepseek-coder', 'deepseek-reasoner']
MAX_TOKENS = 1000

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserState:
    NORMAL = 'normal'
    CHOOSING_PROVIDER = 'choosing_provider'
    CHOOSING_MODEL = 'choosing_chatgpt_model'
    CHOOSING_CLAUDE_MODEL = 'choosing_claude_model'
    CHOOSING_DEEPSEEK_MODEL = 'choosing_deepseek_model'

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserData:
    def __init__(self):
        self.models: Dict[int, str] = {}  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –º–æ–¥–µ–ª—å
        self.states: Dict[int, str] = {}  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.providers: Dict[int, str] = {}  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –ø—Ä–æ–≤–∞–π–¥–µ—Ä (OpenAI, DeepSeek, Anthropic)
    
    def get_model(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.models.get(user_id, DEFAULT_MODEL)
    
    def set_model(self, user_id: int, model: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.models[user_id] = model
    
    def get_state(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.states.get(user_id, UserState.NORMAL)
    
    def set_state(self, user_id: int, state: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.states[user_id] = state
    
    def reset_state(self, user_id: int) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ"""
        if user_id in self.states:
            self.states[user_id] = UserState.NORMAL
            
    def get_provider(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.providers.get(user_id, DEFAULT_PROVIDER)
    
    def set_provider(self, user_id: int, provider: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.providers[user_id] = provider

user_data = UserData()

# API –∑–∞–ø—Ä–æ—Å—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def query_deepseek(user_text: str, model_name: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = "https://api.deepseek.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "model": model_name,
            "messages": [{"role": "user", "content": user_text}]
        }
        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek: {str(e)}"
    except (KeyError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: {e}")
        return "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek"

def query_chatgpt(user_text: str, model_name: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenAI API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        response = openai_client.chat.completions.create(
            model=model_name,
            messages=[{"role": "user", "content": user_text}],
            max_tokens=MAX_TOKENS
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API ({model_name}): {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}"

def query_claude(user_text: str, model_name: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Claude API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        response = anthropic_client.messages.create(
            model=model_name,
            max_tokens=MAX_TOKENS,
            messages=[
                {"role": "user", "content": user_text}
            ]
        )
        return response.content[0].text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic API ({model_name}): {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}"

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_provider_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    deepseek_btn = telebot.types.InlineKeyboardButton("DeepSeek", callback_data="provider_DeepSeek")
    chatgpt_btn = telebot.types.InlineKeyboardButton("ChatGPT", callback_data="provider_ChatGPT")
    claude_btn = telebot.types.InlineKeyboardButton("Claude", callback_data="provider_Claude")
    markup.add(deepseek_btn, chatgpt_btn, claude_btn)
    return markup

def create_model_keyboard(provider):
    """–°–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    if provider == "DeepSeek":
        models = AVAILABLE_DEEPSEEK_MODELS
        prefix = "deepseek_model_"
    elif provider == "ChatGPT":
        models = AVAILABLE_CHATGPT_MODELS
        prefix = "chatgpt_model_"
    elif provider == "Claude":
        models = AVAILABLE_CLAUDE_MODELS
        prefix = "claude_model_"
    else:
        return markup  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    buttons = [telebot.types.InlineKeyboardButton(model, callback_data=f"{prefix}{model}") for model in models]
    for button in buttons:
        markup.add(button)
    
    return markup

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(commands=['clear_keyboard'])
def clear_keyboard(message: telebot.types.Message):
    """–£–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞", 
                    reply_markup=telebot.types.ReplyKeyboardRemove())

# –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@bot.message_handler(commands=['quick_model'])
def quick_model_selection(message: telebot.types.Message):
    """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    providers_btn = telebot.types.InlineKeyboardButton(
        "üìã –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", 
        callback_data="select_provider"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    gpt4o_btn = telebot.types.InlineKeyboardButton(
        "üí¨ GPT-4o (OpenAI)", 
        callback_data="quick_model_ChatGPT_gpt-4o"
    )
    claude_btn = telebot.types.InlineKeyboardButton(
        "üß† Claude 3.7 Sonnet", 
        callback_data="quick_model_Claude_claude-3-7-sonnet-20250219"
    )
    deepseek_reasoner_btn = telebot.types.InlineKeyboardButton(
        "üîç DeepSeek Reasoner", 
        callback_data="quick_model_DeepSeek_deepseek-reasoner"
    )
    
    markup.add(providers_btn, gpt4o_btn, claude_btn, deepseek_reasoner_btn)
    
    bot.send_message(
        message.chat.id, 
        "ü§ñ *–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ –æ–¥–Ω—É –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:", 
        parse_mode="Markdown",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start_message(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è —Å DeepSeek, ChatGPT –∏–ª–∏ Claude.\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å DeepSeek Reasoner.\n\n"
        "–ó–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n"
        "üìå –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: /quick_model - –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
        "üóëÔ∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear_keyboard –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è"
    )
    # –Ø–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    bot.send_message(message.chat.id, welcome_text, reply_markup=telebot.types.ReplyKeyboardRemove())

@bot.message_handler(commands=['help'])
def help_message(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/choose_model - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)\n"
        "/quick_model - –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
        "/current_model - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å\n"
        "/clear_keyboard - —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞—Å—Ç—Ä—è–ª–∞\n\n"
        f"–î–ª—è ChatGPT –¥–æ—Å—Ç—É–ø–Ω—ã –º–æ–¥–µ–ª–∏: {', '.join(AVAILABLE_CHATGPT_MODELS)}\n"
        f"–î–ª—è Claude –¥–æ—Å—Ç—É–ø–Ω—ã –º–æ–¥–µ–ª–∏: {', '.join(AVAILABLE_CLAUDE_MODELS)}\n"
        f"–î–ª—è DeepSeek –¥–æ—Å—Ç—É–ø–Ω—ã –º–æ–¥–µ–ª–∏: {', '.join(AVAILABLE_DEEPSEEK_MODELS)}\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DeepSeek Reasoner.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å."
    )
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–º–æ—â–∏
    bot.send_message(message.chat.id, help_text, reply_markup=telebot.types.ReplyKeyboardRemove())

@bot.message_handler(commands=['current_model'])
def show_current_model(message: telebot.types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    user_id = message.from_user.id
    current_provider = user_data.get_provider(user_id)
    current_model = user_data.get_model(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏
    markup = telebot.types.InlineKeyboardMarkup()
    change_model_btn = telebot.types.InlineKeyboardButton(
        "–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", 
        callback_data="select_provider"
    )
    markup.add(change_model_btn)
    
    # –£–¥–∞–ª—è–µ–º —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    bot.send_message(
        message.chat.id, 
        f"ü§ñ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n*–ü—Ä–æ–≤–∞–π–¥–µ—Ä*: {current_provider}\n*–ú–æ–¥–µ–ª—å*: {current_model}",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(commands=['choose_model'])
def choose_model(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /choose_model"""
    user_id = message.from_user.id
    # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–π
    remove_markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞...", reply_markup=remove_markup)
    
    # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('DeepSeek', 'ChatGPT', 'Claude')
    bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=markup)
    user_data.set_state(user_id, UserState.CHOOSING_PROVIDER)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "select_provider")
def callback_select_provider(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    markup = create_provider_keyboard()
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ AI:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("provider_"))
def callback_provider_selected(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    provider = call.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    user_id = call.from_user.id
    user_data.set_provider(user_id, provider)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    markup = create_model_keyboard(provider)
    bot.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith(("deepseek_model_", "chatgpt_model_", "claude_model_")))
def callback_model_selected(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    parts = call.data.split("_")
    provider_prefix = parts[0]  # deepseek, chatgpt –∏–ª–∏ claude
    model_name = "_".join(parts[2:])  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã "_")
    
    user_id = call.from_user.id
    user_data.set_model(user_id, model_name)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    provider = user_data.get_provider(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    markup = telebot.types.InlineKeyboardMarkup()
    change_model_btn = telebot.types.InlineKeyboardButton(
        "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å", 
        callback_data="select_provider"
    )
    markup.add(change_model_btn)
    
    bot.edit_message_text(
        f"‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã*\n\n*–ü—Ä–æ–≤–∞–π–¥–µ—Ä*: {provider}\n*–ú–æ–¥–µ–ª—å*: {model_name}",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("quick_model_"))
def callback_quick_model_selected(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    parts = call.data.split("_")
    provider = parts[2]  # DeepSeek, ChatGPT –∏–ª–∏ Claude
    model_name = "_".join(parts[3:])  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    
    user_id = call.from_user.id
    user_data.set_provider(user_id, provider)
    user_data.set_model(user_id, model_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    markup = telebot.types.InlineKeyboardMarkup()
    change_model_btn = telebot.types.InlineKeyboardButton(
        "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å", 
        callback_data="select_provider"
    )
    markup.add(change_model_btn)
    
    bot.edit_message_text(
        f"‚úÖ *–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞*\n\n*–ü—Ä–æ–≤–∞–π–¥–µ—Ä*: {provider}\n*–ú–æ–¥–µ–ª—å*: {model_name}",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@bot.message_handler(func=lambda msg: msg.text in ['DeepSeek', 'ChatGPT', 'Claude'])
def handle_provider_choice(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    user_id = message.from_user.id
    
    if user_data.get_state(user_id) != UserState.CHOOSING_PROVIDER:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /choose_model", 
                        reply_markup=telebot.types.ReplyKeyboardRemove())
        return
        
    user_data.set_provider(user_id, message.text)
    
    if message.text == 'ChatGPT':
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for model in AVAILABLE_CHATGPT_MODELS:
            markup.add(model)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å ChatGPT:", reply_markup=markup)
        user_data.set_state(user_id, UserState.CHOOSING_MODEL)
    elif message.text == 'Claude':
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for model in AVAILABLE_CLAUDE_MODELS:
            markup.add(model)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å Claude:", reply_markup=markup)
        user_data.set_state(user_id, UserState.CHOOSING_CLAUDE_MODEL)
    else:  # DeepSeek
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for model in AVAILABLE_DEEPSEEK_MODELS:
            markup.add(model)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å DeepSeek:", reply_markup=markup)
        user_data.set_state(user_id, UserState.CHOOSING_DEEPSEEK_MODEL)

@bot.message_handler(func=lambda msg: msg.text in AVAILABLE_CHATGPT_MODELS)
def handle_model_choice(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ChatGPT"""
    user_id = message.from_user.id
    
    if user_data.get_state(user_id) != UserState.CHOOSING_MODEL:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        bot.send_message(message.chat.id, "–î–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ /choose_model", 
                        reply_markup=telebot.types.ReplyKeyboardRemove())
        return
        
    user_data.set_model(user_id, message.text)
    # –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    bot.send_message(
        message.chat.id, 
        f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {message.text}!", 
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )
    user_data.reset_state(user_id)

@bot.message_handler(func=lambda msg: msg.text in AVAILABLE_CLAUDE_MODELS)
def handle_claude_model_choice(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Claude"""
    user_id = message.from_user.id
    
    if user_data.get_state(user_id) != UserState.CHOOSING_CLAUDE_MODEL:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        bot.send_message(message.chat.id, "–î–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ /choose_model", 
                        reply_markup=telebot.types.ReplyKeyboardRemove())
        return
        
    user_data.set_model(user_id, message.text)
    # –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    bot.send_message(
        message.chat.id, 
        f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {message.text}!", 
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )
    user_data.reset_state(user_id)

@bot.message_handler(func=lambda msg: msg.text in AVAILABLE_DEEPSEEK_MODELS)
def handle_deepseek_model_choice(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ DeepSeek"""
    user_id = message.from_user.id
    
    if user_data.get_state(user_id) != UserState.CHOOSING_DEEPSEEK_MODEL:
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        bot.send_message(message.chat.id, "–î–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ /choose_model", 
                        reply_markup=telebot.types.ReplyKeyboardRemove())
        return
        
    user_data.set_model(user_id, message.text)
    # –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    bot.send_message(
        message.chat.id, 
        f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å {message.text}!", 
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )
    user_data.reset_state(user_id)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda msg: True)
def reply_message(message: telebot.types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        user_text = message.text
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_data.get_state(user_id) != UserState.NORMAL:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–æ—Å–∏–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /clear_keyboard –¥–ª—è —Å–±—Ä–æ—Å–∞.", 
                            reply_markup=telebot.types.ReplyKeyboardRemove())
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å
        provider = user_data.get_provider(user_id)
        model_choice = user_data.get_model(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É API
        if provider == 'DeepSeek':
            reply = query_deepseek(user_text, model_choice)
        elif provider == 'Claude':
            reply = query_claude(user_text, model_choice)
        else:  # OpenAI/ChatGPT
            reply = query_chatgpt(user_text, model_choice)

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(reply) > 4096:
            for i in range(0, len(reply), 4096):
                bot.send_message(message.chat.id, reply[i:i+4096], reply_markup=telebot.types.ReplyKeyboardRemove())
        else:
            bot.send_message(message.chat.id, reply, reply_markup=telebot.types.ReplyKeyboardRemove())
            
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        reply_markup=telebot.types.ReplyKeyboardRemove())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
def retry_on_error(func, max_retries=3, backoff_factor=2):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    def wrapper(*args, **kwargs):
        import time
        retries = 0
        while retries < max_retries:
            try:
                return func(*args, **kwargs)
            except (requests.exceptions.RequestException, requests.exceptions.Timeout) as e:
                wait_time = backoff_factor ** retries
                logger.warning(f"Attempt {retries+1} failed: {e}. Retrying in {wait_time} seconds...")
                time.sleep(wait_time)
                retries += 1
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        return func(*args, **kwargs)
    return wrapper

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
original_query_deepseek = query_deepseek
original_query_chatgpt = query_chatgpt
original_query_claude = query_claude

# –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ API –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
query_deepseek = retry_on_error(original_query_deepseek)
query_chatgpt = retry_on_error(original_query_chatgpt)
query_claude = retry_on_error(original_query_claude)

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–æ–≤–∞–π–¥–µ—Ä DeepSeek, –º–æ–¥–µ–ª—å deepseek-reasoner")
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)